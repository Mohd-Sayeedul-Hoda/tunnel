// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otp_verification.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateOtp = `-- name: CreateOrUpdateOtp :exec
INSERT INTO otp_verification (email, otp, type, expires_at, resend_count, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (email, type) DO UPDATE
SET otp = EXCLUDED.otp,
    expires_at = EXCLUDED.expires_at,
    resend_count = otp_verification.resend_count + 1,
    attempts = 0,
    used = false,
    is_invalidated = false,
    updated_at = NOW()
`

type CreateOrUpdateOtpParams struct {
	Email       string             `json:"email"`
	Otp         string             `json:"otp"`
	Type        string             `json:"type"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	ResendCount int32              `json:"resend_count"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateOrUpdateOtp(ctx context.Context, arg CreateOrUpdateOtpParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateOtp,
		arg.Email,
		arg.Otp,
		arg.Type,
		arg.ExpiresAt,
		arg.ResendCount,
		arg.UpdatedAt,
	)
	return err
}

const getOtp = `-- name: GetOtp :one
SELECT id, email, otp, type, attempts, resend_count, used, is_invalidated, expires_at, created_at, updated_at FROM otp_verification
WHERE email = $1 AND type = $2
`

type GetOtpParams struct {
	Email string `json:"email"`
	Type  string `json:"type"`
}

func (q *Queries) GetOtp(ctx context.Context, arg GetOtpParams) (OtpVerification, error) {
	row := q.db.QueryRow(ctx, getOtp, arg.Email, arg.Type)
	var i OtpVerification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Otp,
		&i.Type,
		&i.Attempts,
		&i.ResendCount,
		&i.Used,
		&i.IsInvalidated,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const increaseOtpAttempt = `-- name: IncreaseOtpAttempt :exec
UPDATE otp_verification
SET attempts = attempts + 1,
    updated_at = NOW()
WHERE email = $1 AND type = $2
`

type IncreaseOtpAttemptParams struct {
	Email string `json:"email"`
	Type  string `json:"type"`
}

func (q *Queries) IncreaseOtpAttempt(ctx context.Context, arg IncreaseOtpAttemptParams) error {
	_, err := q.db.Exec(ctx, increaseOtpAttempt, arg.Email, arg.Type)
	return err
}

const invalidateOtp = `-- name: InvalidateOtp :exec
UPDATE otp_verification
SET is_invalidated = true,
    updated_at = NOW()
WHERE email = $1 AND type = $2
`

type InvalidateOtpParams struct {
	Email string `json:"email"`
	Type  string `json:"type"`
}

func (q *Queries) InvalidateOtp(ctx context.Context, arg InvalidateOtpParams) error {
	_, err := q.db.Exec(ctx, invalidateOtp, arg.Email, arg.Type)
	return err
}

const verifyOtp = `-- name: VerifyOtp :exec
UPDATE otp_verification
SET used = true,
    updated_at = NOW()
WHERE email = $1 AND type = $2
`

type VerifyOtpParams struct {
	Email string `json:"email"`
	Type  string `json:"type"`
}

func (q *Queries) VerifyOtp(ctx context.Context, arg VerifyOtpParams) error {
	_, err := q.db.Exec(ctx, verifyOtp, arg.Email, arg.Type)
	return err
}
