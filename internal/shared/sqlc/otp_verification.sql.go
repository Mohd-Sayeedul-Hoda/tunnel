// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otp_verification.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countOtpsAfterUtcTime = `-- name: CountOtpsAfterUtcTime :one
SELECT COUNT(*) FROM otp_verification
WHERE created_at > $1 AND email = $2 AND type = $3
`

type CountOtpsAfterUtcTimeParams struct {
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Email     string             `json:"email"`
	Type      string             `json:"type"`
}

func (q *Queries) CountOtpsAfterUtcTime(ctx context.Context, arg CountOtpsAfterUtcTimeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countOtpsAfterUtcTime, arg.CreatedAt, arg.Email, arg.Type)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOtp = `-- name: CreateOtp :exec
INSERT INTO otp_verification (email, otp, type, expires_at)
VALUES ($1, $2, $3, $4)
`

type CreateOtpParams struct {
	Email     string             `json:"email"`
	Otp       string             `json:"otp"`
	Type      string             `json:"type"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) error {
	_, err := q.db.Exec(ctx, createOtp,
		arg.Email,
		arg.Otp,
		arg.Type,
		arg.ExpiresAt,
	)
	return err
}

const getOtp = `-- name: GetOtp :one
SELECT id, email, otp, type, attempts, used, is_invalidated, expires_at, created_at, updated_at FROM otp_verification
WHERE email = $1 AND type = $2
ORDER BY created_at DESC 
LIMIT 1
`

type GetOtpParams struct {
	Email string `json:"email"`
	Type  string `json:"type"`
}

func (q *Queries) GetOtp(ctx context.Context, arg GetOtpParams) (OtpVerification, error) {
	row := q.db.QueryRow(ctx, getOtp, arg.Email, arg.Type)
	var i OtpVerification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Otp,
		&i.Type,
		&i.Attempts,
		&i.Used,
		&i.IsInvalidated,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const increaseAttemptAndInvalidateOtp = `-- name: IncreaseAttemptAndInvalidateOtp :exec
UPDATE otp_verification
SET attempts = attempts + 1,
is_invalidated = true,
updated_at = NOW()
WHERE id = $1
`

func (q *Queries) IncreaseAttemptAndInvalidateOtp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, increaseAttemptAndInvalidateOtp, id)
	return err
}

const increaseOtpAttempt = `-- name: IncreaseOtpAttempt :exec
UPDATE otp_verification
SET attempts = attempts + 1,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) IncreaseOtpAttempt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, increaseOtpAttempt, id)
	return err
}

const invalidateOtp = `-- name: InvalidateOtp :exec
UPDATE otp_verification
SET is_invalidated = true,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) InvalidateOtp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, invalidateOtp, id)
	return err
}

const verifyOtp = `-- name: VerifyOtp :exec
UPDATE otp_verification
SET used = true,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyOtp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, verifyOtp, id)
	return err
}
